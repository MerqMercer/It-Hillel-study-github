Частенько так случается, что данные нужно хранить в одном виде, а выводить на страницу в другом.

К примеру: есть сущность Product, которая включает:

- цену товара (price)

- json строка с аттрибутами товара (attributes)

- время обновления записи (updatedAt)

Допустим наша задача хранить эти данные нужно в следующих форматах:

- price: цена товара. Цена обычно хранится в виде числа с плавающей точкой. Но в нашем случае хранить мы хотим в виде целого числа. Чтобы сохранить точность плавающей точки в два знака после запятой число должно храниться в БД умноженное на 100. При выводе на страницу мы хотим это же самое число видеть в нормальном виде, с плавающей точкой, т.е. должны разделить на 10. К примеру: товар стоит 100 денежных единиц. Значит в БД будет храниться число 10000, а на странице отображаться 100.00. Для реализации подобного функционала используется сast-класс MoneyCast.

- attributes: аттрибуты товара. К примеру товар может состоять из большого количества атрибутов. В базе мы будем их хранить в виде json-строки, а добавлять новые атрибуты через механизм работы с массивом. Для реализации подобного функционала используется сast-класс ArrayCast.

- updatedAt: время обновления. Допустим в базе оно должно храниться в виде timestamp в часовом поясе UTC, а на страницу выводиться в виде Y-m-d H:i:s в часовом поясе Киева. Для реализации подобного функционала используется сast-класс DateTimeCast.

Пример:

Допустим у нас есть товар со следующими данными:

$item = [
  'price' => 1750000,
  'attributes' => '{"memory":"8GB","color":"silver"}',
  'updated_at' => 1649428269
];

$product = new \Hillel\Entities\Product(
  $item['price'],
  $item['attributes'],
  $item['updated_at']
);

Обновляем поля класса следующим образом:

// добавим атрибут в виде добавления нового элемента в массив
$attributes = $product->attributes;
$attributes['year'] = 2021;
$product->attributes = $attributes;

// обновим цену
$product->price = 18500;

// зафиксируем время добавления время
$product->updatedAt = time();

В результате при распечатке объекта увидим преобразования значений по тем правилам, которые описаны выше:

echo $product;

Array
(
  [price] => 1850000
  [attributes] => {"memory":"8GB","color":"silver","year":2021}
  [updated_at] => 1649433098
)

При выводе отдельных полей увидим следующие данные:

echo $product->price; // 18500
print_r($product->attributes); // Array ( [memory] => 8GB [color] => silver [year] => 2021 )
echo $product->updatedAt; // 2022-04-08 18:51:38

Задача:

1. Изучить класса в каталоге Casts

2. Модернизировать класс Product, реализовав магические методы __set, __get, чтобы преобразования из примера стали возможными

3. Реализовать метод __toString для вывода всех полей объекта

P.S. В проекте есть файл с тестами, которые помогут в запуске проверок вашего решения.

Задание считается выполненным, если все тесты проходят и код-стайл в норме.

README в помощь для установки зависимостей, запуска тестов и проверки код-стайла.

P.P.S. Основа для проекта в архиве code.rar
